↓PageEvent [ngx.components.UIPageEvent-1606499720378]: 
  ↓triggerInit [ngx.components.UICustomAction-1606642554466]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '            setTimeout(()=> {
                            page["stripeCard"].nativeElement.dispatchEvent(new MouseEvent(''blur'', {
                                view: window,
                                bubbles: true,
                                cancelable: true
                            }));
                        }, 0)
                        resolve();
            '
↓Div [ngx.components.UIDynamicElement-1606561053347]: 
  beanData: '{"ionBean":"DivTag"}'
  identifier: stripeCard
  tagName: div
  ↓StripeFragment [ngx.components.UICustom-1606500600960]: 
    htmlTemplate: |
      <form id="payment-form">
      	<div id="card-element">
      		<!--Stripe.js injects the Card Element-->
      	</div>
      	<button id="submit">
      		<div  class="spinner hidden" id="spinner"></div>
      		<span id="button-text">Pay</span>
      	</button>
      	<p id="card-error" role="alert"></p>
      	<p class="result-message hidden">Payment succeeded.</p>
      </form>
      
  ↓StyleCardInput [ngx.components.UIStyle-1606561071419]: 
    styleContent: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '	
            	form {
            	  width: 100%;
            	  min-width: 300px;
            	  align-self: center;
            	  box-shadow: 0px 0px 0px 0.5px rgba(50, 50, 93, 0.1),
            	    0px 2px 5px 0px rgba(50, 50, 93, 0.1), 0px 1px 1.5px 0px rgba(0, 0, 0, 0.07);
            	  border-radius: 7px;
            	  padding: 5px;
            	};	
            	
            	button {
            	  background: #5469d4;
            	  color: #ffffff;
            	  font-family: Arial, sans-serif;
            	  border-radius: 0 0 4px 4px;
            	  border: 0;
            	  padding: 12px 16px;
            	  font-size: 16px;
            	  font-weight: 600;
            	  cursor: pointer;
            	  display: block;
            	  transition: all 0.2s ease;
            	  box-shadow: 0px 4px 5.5px 0px rgba(0, 0, 0, 0.07);
            	  width: 100%
            	};
            	
            	button:hover {
             	 filter: contrast(115%);
            	};
            	
            	button:disabled {
              		opacity: 0.5;
              		cursor: default;
            	};
            	
            	#card-element {
            	  border-radius: 4px 4px 0 0 ;
            	  padding: 12px;
            	  border: 1px solid rgba(50, 50, 93, 0.1);
            	  height: 44px;
            	  width: 100%;
            	  background: white;
            	};
            	
            	#card-error {
            	  color: rgb(105, 115, 134);
            	  text-align: left;
            	  font-size: 13px;
            	  line-height: 17px;
            	  margin-top: 12px;
            	};
            	
            	input {
            	  border-radius: 6px;
            	  margin-bottom: 6px;
            	  padding: 12px;
            	  border: 1px solid rgba(50, 50, 93, 0.1);
            	  height: 44px;
            	  font-size: 16px;
            	  width: 100%;
            	  background: white;
            	};
            	
            	
            	.result-message {
            	  line-height: 22px;
            	  font-size: 16px;
            	};
            	
            	.result-message a {
            	  color: rgb(89, 111, 214);
            	  font-weight: 600;
            	  text-decoration: none;
            	};	
            	
            	.hidden {
             		 display: none;
            	};
            	
            	
            	/* spinner/processing state, errors */
            	.spinner,
            	.spinner:before,
            	.spinner:after {
            	  border-radius: 50%;
            	}
            	.spinner {
            	  color: #ffffff;
            	  font-size: 22px;
            	  text-indent: -99999px;
            	  margin: 0px auto;
            	  position: relative;
            	  width: 20px;
            	  height: 20px;
            	  box-shadow: inset 0 0 0 2px;
            	  -webkit-transform: translateZ(0);
            	  -ms-transform: translateZ(0);
            	  transform: translateZ(0);
            	}
            	;
            	.spinner:before,
            	.spinner:after {
            	  position: absolute;
            	  content: "";
            	};
            	
            	.spinner:before {
            	  width: 10.4px;
            	  height: 20.4px;
            	  background: #5469d4;
            	  border-radius: 20.4px 0 0 20.4px;
            	  top: -0.2px;
            	  left: -0.2px;
            	  -webkit-transform-origin: 10.4px 10.2px;
            	  transform-origin: 10.4px 10.2px;
            	  -webkit-animation: loading 2s infinite ease 1.5s;
            	  animation: loading 2s infinite ease 1.5s;
            	};
            	
            	.spinner:after {
            	  width: 10.4px;
            	  height: 10.2px;
            	  background: #5469d4;
            	  border-radius: 0 10.2px 10.2px 0;
            	  top: -0.1px;
            	  left: 10.2px;
            	  -webkit-transform-origin: 0px 10.2px;
            	  transform-origin: 0px 10.2px;
            	  -webkit-animation: loading 2s infinite ease;
            	  animation: loading 2s infinite ease;
            	};
            	
            	@-webkit-keyframes loading {
            	  0% {
            	    -webkit-transform: rotate(0deg);
            	    transform: rotate(0deg);
            	  }
            	  100% {
            	    -webkit-transform: rotate(360deg);
            	    transform: rotate(360deg);
            	  }
            	};
            	
            	@keyframes loading {
            	  0% {
            	    -webkit-transform: rotate(0deg);
            	    transform: rotate(0deg);
            	  }
            	  100% {
            	    -webkit-transform: rotate(360deg);
            	    transform: rotate(360deg);
            	  }
            	};
            '
  ↓Event [ngx.components.UIControlEvent-1606642370201]: 
    attrName: (blur)
    eventName: (blur)
    ↓CallSequenceGetApiKeys [ngx.components.UIDynamicAction-1606501183024]: 
      beanData: '{"ionBean":"CallSequenceAction","requestable":"plain:lib_Stripe.getApiKeys"}'
      ↓CallSequenceCreatePaymentIntent [ngx.components.UIDynamicAction-1606557106075]: 
        beanData: '{"ionBean":"CallSequenceAction","requestable":"plain:lib_Stripe.CreatePaymentIntent"}'
        ↓amount [ngx.components.UIControlVariable-1606557117293]: 
          comment: new variable
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: source:{"filter":"Shared","project":"lib_Stripe_ui_ngx","input":"","model":{"data":[{"priority":1606559954121}],"path":"?.AmountInCents","prefix":"","suffix":"","custom":"","useCustom":false}}
        ↓currency [ngx.components.UIControlVariable-1606557117295]: 
          comment: new variable
          varValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: source:{"filter":"Shared","project":"lib_Stripe_ui_ngx","input":"","model":{"data":[{"priority":1606559954121}],"path":"?.Currency","prefix":"","suffix":"","custom":"","useCustom":false}}
        ↓InstallStripeClient [ngx.components.UICustomAction-1606499731944]: 
          actionValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
              - com.twinsoft.convertigo.beans.common.FormatedContent: 
                →: |
                  '		    var loading = function(isLoading: boolean) {
                  			  if (isLoading) {
                  				    // Disable the button and show a spinner
                  				    document.querySelector("button").disabled = true;
                  				    document.querySelector("#spinner").classList.remove("hidden");
                  				    document.querySelector("#button-text").classList.add("hidden");
                  				  } else {
                  				    document.querySelector("button").disabled = false;
                  				    document.querySelector("#spinner").classList.add("hidden");
                  				    document.querySelector("#button-text").classList.remove("hidden");
                  				  }
                  			};
                  			
                  			// Show the customer the error from Stripe if their card fails to charge
                  			var showError = function(errorMsgText: string) {
                  			  loading(false);
                  			  var errorMsg = document.querySelector("#card-error");
                  			  errorMsg.textContent = errorMsgText;
                  			  setTimeout(function() {
                  			    errorMsg.textContent = "";
                  			  }, 4000);
                  			};
                  			
                  			// Shows a success message when the payment is complete
                  			var orderComplete = function(paymentIntentId: string) {
                  			  loading(false);
                  			  document.querySelector(".result-message").classList.remove("hidden");
                  			  document.querySelector("button").disabled = true;
                  			};			
                  			
                  			// Load the stripe.js and when load finished, start installation process..
                  			load(''https://js.stripe.com/v3/'', function (err, script) {
                  				if (err) {
                  						page.c8o.log.error(''[IntallStripe] ''+ err);
                  				}
                  				else {
                  						page.c8o.log.debug(''[IntallStripe] OK '');
                  						var stripe = window["Stripe"](vars.publicApiKey);
                  						var elements = stripe.elements();
                  					    var style = {
                  					      base: {
                  					        color: "#32325d",
                  					        fontFamily: ''Arial, sans-serif'',
                  					        fontSmoothing: "antialiased",
                  					        fontSize: "16px",
                  					        "::placeholder": {
                  					          color: "#32325d"
                  					        }
                  					      },
                  					      invalid: {
                  					        fontFamily: ''Arial, sans-serif'',
                  					        color: "#fa755a",
                  					        iconColor: "#fa755a"
                  					      }
                  					    };
                  				
                  				 		var card = elements.create("card", { style: style });
                  				    	// Stripe injects an iframe into the DOM
                  				    	card.mount("#card-element");
                  				
                  						card.on("change", function (event) {
                  						      // Disable the Pay button if there are no card details in the Element
                  						      document.querySelector("button").disabled = event.empty;
                  						      document.querySelector("#card-error").textContent = event.error ? event.error.message : "";
                  						});
                  				
                  						var form = document.getElementById("payment-form");
                  					    form.addEventListener("submit", function(event) {
                  							loading(true);
                  							event.preventDefault();
                  							// Complete payment when the submit button is clicked
                  							stripe.confirmCardPayment(vars.clientSecret, {
                  							     payment_method: {
                  							       card: card
                  							     }
                  						    }).then(function(result: any) {
                  							    if (result.error) {
                  							        // Show error to your customer
                  							        showError(result.error.message);
                  									resolve(result)
                  							    } else {
                  							        // The payment succeeded!
                  							        orderComplete(result.paymentIntent.id);
                  									resolve(result)
                  							    }
                  						    });
                  					    });
                  				}
                  			})
                  '
          package_dependencies: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
              - com.twinsoft.convertigo.beans.common.XMLVector: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                  - com.twinsoft.convertigo.beans.common.XMLVector: 
                    - java.lang.String: 
                      - ↑value: load-script
                    - java.lang.String: 
                      - ↑value: 1.0.0
          page_ts_imports: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
              - com.twinsoft.convertigo.beans.common.XMLVector: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
                  - com.twinsoft.convertigo.beans.common.XMLVector: 
                    - java.lang.String: 
                      - ↑value: '* as load'
                    - java.lang.String: 
                      - ↑value: load-script
          ↓publicApiKey [ngx.components.UIControlVariable-1606501136328]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: source:{"filter":"Sequence","project":"lib_Stripe_ui_ngx","input":"","model":{"data":[{"sequence":"lib_Stripe.getApiKeys","marker":""}],"path":"?.publicApiKey","prefix":"","suffix":"","custom":"","useCustom":false}}
          ↓clientSecret [ngx.components.UIControlVariable-1606639194131]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: source:{"filter":"Sequence","project":"lib_Stripe_ui_ngx","input":"","model":{"data":[{"sequence":"lib_Stripe.CreatePaymentIntent","marker":""}],"path":"?.clientSecret","prefix":"","suffix":"","custom":"","useCustom":false}}
          ↓EmitEvent [ngx.components.UIDynamicEmit-1631810529923]: 
            beanData: |
              '{
               "ionBean": "EmitEventAction",
               "event": "plain:lib_Stripe_ui_ngx.MobileApplication.Application.StripeCreditCardPayment.stripeEvent",
               "data": "script:out"
              }'
          ↓PublishEvent [ngx.components.UIDynamicAction-1606650743551]: 
            beanData: |
              '{
               "ionBean": "PublishEventAction",
               "topic": "plain:stripeEvent",
               "data": "script:out"
              }'
↓AmountInCents [ngx.components.UICompVariable-1606640511679]: 
  value: '''0'''
↓Currency [ngx.components.UICompVariable-1606640542623]: 
  value: '''USD'''
↓stripeEvent [ngx.components.UICompEvent-1631810529909]: 
  attrName: stripeEvent